# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build and Deploy to Cloud Run

on:
  workflow_dispatch:
  push:
    branches: [ "dev" ]

env:
  PROJECT_ID: finesse-406710
  GAR_LOCATION: europe-central2
  SERVICE: finesse-frontend
  REGION: europe-central2

jobs:
  auth:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. -  projects/29322109009/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-oidc 
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - finesse-frontend-sa@fourkeys-386218.iam.gserviceaccount.com

  build:
    needs: auth
    runs-on: ubuntu-latest
    steps:
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'

      # - name: Get tag
      #   id: get-tag
      #   run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}

      # - id: docker-push-tagged
      #   name: Tag Docker image and push to Google Artifact Registry
      #   uses: docker/build-push-action@v2
      #   with:
      #     push: true
      #     tags: |
      #        ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"

        # gcloud auth configure-docker europe-central2-docker.pkg.dev
        # gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://europe-central2-docker.pkg.dev
      # END - Docker auth and build

  deploy:
    runs-on: ubuntu-latest
    needs: auth
    steps:
      - name: Create Service declaration   
        run: |-
          export CONTAINER_IMAGE="${{ vars.REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/${{ vars.SERVICE_NAME }}:${{ inputs.ref }}"
          export SERVICE_NAME="${{ vars.SERVICE_NAME }}"
          export PROJECT_ID="${{ vars.GCP_PROJECT_ID }}"
          export REVISION_TAG="${{ inputs.ref }}"
          export CLOUD_RUN_SA="${{ vars.CLOUD_RUN_SA }}"
          export ENVIRONMENT="${{ inputs.environment }}"
          envsubst < ./service-yaml/container.yaml > container-${{ inputs.environment }}.yaml
          cat container-${{ inputs.environment }}.yaml

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1.0.2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
